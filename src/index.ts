import { app, BrowserWindow, ipcMain, shell } from "electron";
import * as WebSocket from "ws";
import * as fse from "fs-extra";
import path from "path";

import webServer from "./servers/web";
import { wss, start } from "./servers/socket";
import { MessageType, IpcRequest, WidgetType, WidgetContentType } from "./ipc";
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: any;

let mainWindow: BrowserWindow | null = null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = async (): Promise<void> => {
  const checkFiles = async () => {
    await Promise.all(
      ["html", "css", "js"].map((ext) =>
        fse.stat(path.join(app.getPath("userData"), "widget", `index.${ext}`))
      )
    ).catch(async () => {
      await fse.copy(
        `${__dirname}/widget`,
        path.join(app.getPath("userData"), "widget"),
        { overwrite: true }
      );
    });
  };
  await checkFiles();
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 633,
    width: 800,
    minHeight: 633,
    minWidth: 346,
    show: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  mainWindow.removeMenu();

  mainWindow.on("closed", () => {
    mainWindow = null;
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  mainWindow.webContents.on("did-finish-load", () => {
    if (!mainWindow) {
      throw new Error('"mainWindow" is not defined');
    }

    mainWindow.show();
    mainWindow.focus();
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
webServer(path.join(app.getPath("userData"), "widget"));
start();

// IPC handlers.
ipcMain.handle(IpcRequest.Message, (_, arg: MessageType): void => {
  wss.clients.forEach((client) => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(JSON.stringify(arg));
    }
  });
});

ipcMain.handle(
  IpcRequest.SaveWidget,
  async (_, arg: WidgetContentType): Promise<void> => {
    const htmlTemplate =
      '<!doctypehtml><html lang=en><meta charset=UTF-8><meta content="IE=edge"http-equiv=X-UA-Compatible><meta content="width=device-width,initial-scale=1"name=viewport><title>SLOBSPoints Widget</title><link href=/style.css rel=stylesheet><!--slobs-content-->{slobs-content}<!--/slobs-content--><script src=./index.js></script>';
    const writeFile = async (data: string) =>
      await fse.outputFile(
        path.join(
          app.getPath("userData"),
          "widget",
          `index.${arg.type === "javascript" ? "js" : arg.type}`
        ),
        data
      );

    if (arg.type === "html") {
      await writeFile(htmlTemplate.replace("{slobs-content}", arg.content));
    } else {
      await writeFile(arg.content);
    }
  }
);

ipcMain.handle(
  IpcRequest.OpenWidget,
  async (): Promise<WidgetContentType[]> => {
    const readFile = async (type: string) => {
      const content = await fse.readFile(
        path.join(
          app.getPath("userData"),
          "widget",
          `index.${type === "javascript" ? "js" : type}`
        ),
        "utf-8"
      );
      return {
        type,
        content:
          type === "html"
            ? content.match(
                /<!--slobs-content-->(.*)<!--\/slobs-content-->/s
              )[1]
            : content,
      };
    };
    return await Promise.all(
      ["html", "css", "javascript"].map((ext) => readFile(ext))
    );
  }
);

ipcMain.handle(
  IpcRequest.ResetWidget,
  async (_, arg: WidgetType): Promise<void> => {
    const idx = `index.${arg.type === "javascript" ? "js" : arg.type}`;
    await fse.copy(
      `${__dirname}/widget/${idx}`,
      path.join(app.getPath("userData"), "widget", idx)
    );
  }
);

ipcMain.handle(IpcRequest.OpenURL, async (_, arg: string): Promise<void> => {
  await shell.openExternal(arg);
});
